package lesson

/**
 * ### `launch {}` trong Kotlin Coroutines l√† g√¨?
 * `launch {}` l√† m·ªôt h√†m kh·ªüi ch·∫°y m·ªôt **coroutine m·ªõi** m√† kh√¥ng ch·∫∑n lu·ªìng hi·ªán t·∫°i.
 *
 * ---
 *
 * ## üåü **T√≥m t·∫Øt v·ªÅ `launch {}`**
 * - **Ch·∫°y b·∫•t ƒë·ªìng b·ªô** (kh√¥ng ch·∫∑n coroutine cha).
 * - **Kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£** (d√πng khi kh√¥ng c·∫ßn gi√° tr·ªã tr·∫£ v·ªÅ).
 * - **Th√≠ch h·ª£p cho c√°c t√°c v·ª• ch·∫°y n·ªÅn** nh∆∞ t·∫£i d·ªØ li·ªáu, ghi log, g·ª≠i request API, v.v.
 *
 * ---
 *
 * ## üõ† **So s√°nh `launch {}` v√† g·ªçi tr·ª±c ti·∫øp (kh√¥ng d√πng `launch`)**
 * ### 1 **D√πng `launch` (ch·∫°y song song)**
 * ```kotlin
 * suspend fun doWorld() = coroutineScope {
 *     launch {
 *         delay(2000L)
 *         println("World 2")
 *     }
 *
 *     launch {
 *         delay(100L)
 *         println("World 1")
 *     }
 *
 *     println("Hello")
 * }
 * ```
 * üìù **K·∫øt qu·∫£ in ra:**
 * ```
 * Hello
 * World 1
 * World 2
 * ```
 * üîπ **Gi·∫£i th√≠ch:**
 * - `launch {}` t·∫°o coroutine m·ªõi, ch·∫°y **song song**.
 * - `println("Hello")` ch·∫°y ngay l·∫≠p t·ª©c.
 * - `World 1` in sau 100ms.
 * - `World 2` in sau 2000ms.
 *
 * ---
 *
 * ### 2 **Kh√¥ng d√πng `launch` (ch·∫°y tu·∫ßn t·ª±)**
 * ```kotlin
 * suspend fun doWorld() = coroutineScope {
 *     delay(2000L)  // Ch·∫∑n to√†n b·ªô coroutineScope trong 2 gi√¢y
 *     println("World 2")
 *
 *     delay(100L)  // Ch·∫∑n th√™m 100ms
 *     println("World 1")
 *
 *     println("Hello")
 * }
 * ```
 * üìù **K·∫øt qu·∫£ in ra:**
 * ```
 * (World 2 sau 2 gi√¢y)
 * World 2
 * (World 1 sau 100ms n·ªØa)
 * World 1
 * Hello
 * ```
 * üîπ **Gi·∫£i th√≠ch:**
 * - `delay(2000L)` **ch·∫∑n** to√†n b·ªô `doWorld()`, n√™n `"World 2"` in tr∆∞·ªõc.
 * - Sau ƒë√≥ `delay(100L)`, `"World 1"` in ra.
 * - `"Hello"` in ra cu·ªëi c√πng.
 *
 * ---
 *
 * ## ü§î **Khi n√†o d√πng `launch {}`?**
 * ‚úî Khi c·∫ßn **ch·∫°y song song** m√† kh√¥ng ch·∫∑n coroutine cha.
 * ‚úî Khi kh√¥ng c·∫ßn l·∫•y k·∫øt qu·∫£ tr·∫£ v·ªÅ (v√≠ d·ª•: t·∫£i d·ªØ li·ªáu, ghi log).
 * ‚úî Khi mu·ªën kh·ªüi ch·∫°y nhi·ªÅu coroutine c√πng l√∫c.
 *
 * ## ‚ö† **Khi n√†o KH√îNG n√™n d√πng `launch {}`?**
 * ‚ùå Khi c·∫ßn l·∫•y gi√° tr·ªã tr·∫£ v·ªÅ ‚Üí D√πng `async {}` v·ªõi `await()`.
 * ‚ùå Khi mu·ªën ƒë·∫£m b·∫£o tu·∫ßn t·ª± ‚Üí Kh√¥ng d√πng `launch`, g·ªçi tr·ª±c ti·∫øp.
 *
 * ---
 *
 * ## ‚úÖ **K·∫øt lu·∫≠n**
 * - `launch {}` gi√∫p **ch·∫°y b·∫•t ƒë·ªìng b·ªô** m√† **kh√¥ng ch·∫∑n coroutine cha**.
 * - N·∫øu kh√¥ng d√πng `launch {}`, `delay()` s·∫Ω ch·∫∑n to√†n b·ªô coroutine cha.
 * - D√πng `launch {}` khi mu·ªën ch·∫°y nhi·ªÅu coroutine song song m√† kh√¥ng c·∫ßn k·∫øt qu·∫£ tr·∫£ v·ªÅ.
 */
fun main() {}