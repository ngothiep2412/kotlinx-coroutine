package coroutine

import kotlinx.coroutines.*

/**
 * ### **`SupervisorJob` l√† g√¨?**
 * `SupervisorJob` l√† m·ªôt bi·∫øn th·ªÉ c·ªßa `Job` trong Kotlin Coroutines, ƒë∆∞·ª£c d√πng khi b·∫°n mu·ªën qu·∫£n l√Ω c√°c coroutine **ƒë·ªôc l·∫≠p v·ªõi nhau**, nghƒ©a l√† **m·ªôt coroutine con th·∫•t b·∫°i s·∫Ω kh√¥ng l√†m h·ªßy t·∫•t c·∫£ c√°c coroutine anh em kh√°c**.
 *
 * ---
 *
 * ## **1 S·ª± kh√°c bi·ªát gi·ªØa `Job` v√† `SupervisorJob`**
 * | **ƒê·∫∑c ƒëi·ªÉm**            | **`Job` (M·∫∑c ƒë·ªãnh)** | **`SupervisorJob`** |
 * |-------------------------|---------------------|---------------------|
 * | **H·ªßy coroutine con**   | Khi m·ªôt coroutine con b·ªã l·ªói, **to√†n b·ªô scope (bao g·ªìm c√°c coroutine anh em)** s·∫Ω b·ªã h·ªßy. | Khi m·ªôt coroutine con b·ªã l·ªói, **c√°c coroutine anh em kh√°c v·∫´n ti·∫øp t·ª•c ch·∫°y**. |
 * | **T√≠nh ƒë·ªôc l·∫≠p**        | C√°c coroutine trong scope **ph·ª• thu·ªôc l·∫´n nhau**. | C√°c coroutine **ho·∫°t ƒë·ªông ƒë·ªôc l·∫≠p** v·ªõi nhau. |
 * | **Use case**            | Khi c√°c coroutine con li√™n quan ch·∫∑t ch·∫Ω v√† **c·∫ßn h·ªßy to√†n b·ªô n·∫øu c√≥ l·ªói**. | Khi c√°c coroutine **ho·∫°t ƒë·ªông ri√™ng l·∫ª** v√† m·ªôt coroutine l·ªói kh√¥ng n√™n ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c coroutine kh√°c. |
 *
 * ---
 *
 * ## **2 V√≠ d·ª• minh h·ªça**
 * ### **‚ùå Khi d√πng `Job` (M·∫∑c ƒë·ªãnh) ‚Äì T·∫•t c·∫£ coroutine b·ªã h·ªßy khi c√≥ l·ªói**
 * ```kotlin
 * val scope = CoroutineScope(Dispatchers.Default + Job())
 *
 * scope.launch {
 *     launch {
 *         delay(1000)
 *         println("‚úÖ Task 1 ho√†n th√†nh")
 *     }
 *
 *     launch {
 *         delay(500)
 *         throw RuntimeException("‚ùå Task 2 g·∫∑p l·ªói")
 *     }
 *
 *     launch {
 *         delay(1500)
 *         println("‚úÖ Task 3 ho√†n th√†nh")
 *     }
 * }
 * ```
 * üî¥ **K·∫øt qu·∫£:**
 * ```
 * ‚ùå Task 2 g·∫∑p l·ªói
 * (T·∫•t c·∫£ c√°c coroutine kh√°c b·ªã h·ªßy v√† kh√¥ng ch·∫°y n·ªØa)
 * ```
 * üëâ **V√¨ `Job` m·∫∑c ƒë·ªãnh h·ªßy to√†n b·ªô scope khi c√≥ l·ªói.**
 *
 * ---
 *
 * ### **‚úÖ Khi d√πng `SupervisorJob` ‚Äì Ch·ªâ coroutine l·ªói b·ªã h·ªßy, c√°c coroutine kh√°c v·∫´n ch·∫°y**
 * ```kotlin
 * val scope = CoroutineScope(Dispatchers.Default + SupervisorJob())
 *
 * scope.launch {
 *     launch {
 *         delay(1000)
 *         println("‚úÖ Task 1 ho√†n th√†nh")
 *     }
 *
 *     launch {
 *         delay(500)
 *         throw RuntimeException("‚ùå Task 2 g·∫∑p l·ªói")
 *     }
 *
 *     launch {
 *         delay(1500)
 *         println("‚úÖ Task 3 ho√†n th√†nh")
 *     }
 * }
 * ```
 * üü¢ **K·∫øt qu·∫£:**
 * ```
 * ‚ùå Task 2 g·∫∑p l·ªói
 * ‚úÖ Task 1 ho√†n th√†nh
 * ‚úÖ Task 3 ho√†n th√†nh
 * ```
 * üëâ **V√¨ `SupervisorJob` ch·ªâ h·ªßy coroutine b·ªã l·ªói, c√°c coroutine kh√°c v·∫´n ti·∫øp t·ª•c ch·∫°y.**
 *
 * ---
 *
 * ## **3 Khi n√†o n√™n d√πng `SupervisorJob`?**
 * ‚úÖ **Khi mu·ªën c√°c coroutine ho·∫°t ƒë·ªông ƒë·ªôc l·∫≠p**, v√≠ d·ª•:
 * - **T·∫£i nhi·ªÅu d·ªØ li·ªáu song song**: N·∫øu m·ªôt API call th·∫•t b·∫°i, c√°c API kh√°c v·∫´n ti·∫øp t·ª•c.
 * - **Ch·∫°y nhi·ªÅu t√°c v·ª• n·ªÅn (background work)**: N·∫øu m·ªôt task l·ªói, kh√¥ng l√†m h·ªßy to√†n b·ªô h·ªá th·ªëng.
 * - **UI & ViewModel trong Android**: M·ªôt coroutine c·∫≠p nh·∫≠t UI b·ªã l·ªói kh√¥ng n√™n l√†m s·∫≠p to√†n b·ªô ViewModel.
 *
 * ‚ùå **Kh√¥ng d√πng khi c√°c coroutine c√≥ quan h·ªá ch·∫∑t ch·∫Ω**, v√¨ n·∫øu m·ªôt task l·ªói m√† c√°c task kh√°c v·∫´n ti·∫øp t·ª•c c√≥ th·ªÉ g√¢y l·ªói logic.
 *
 * ---
 *
 * ## **4 T√≥m l·∫°i**
 * | **D√πng `Job` khi**                | **D√πng `SupervisorJob` khi** |
 * |------------------------------------|----------------------------|
 * | C√°c coroutine **ph·ª• thu·ªôc nhau**, m·ªôt c√°i l·ªói th√¨ c·∫£ nh√≥m ph·∫£i d·ª´ng. | C√°c coroutine **ƒë·ªôc l·∫≠p**, m·ªôt c√°i l·ªói th√¨ c√°c c√°i kh√°c v·∫´n ch·∫°y. |
 * | V√≠ d·ª•: Transaction ng√¢n h√†ng (n·∫øu m·ªôt b∆∞·ªõc l·ªói, rollback t·∫•t c·∫£). | V√≠ d·ª•: T·∫£i nhi·ªÅu API song song, m·ªôt API l·ªói kh√¥ng l√†m h·ªßy t·∫•t c·∫£. |
 *
 * üöÄ **K·∫øt lu·∫≠n**: N·∫øu b·∫°n mu·ªën **c√°c coroutine ho·∫°t ƒë·ªông ƒë·ªôc l·∫≠p v√† kh√¥ng b·ªã h·ªßy khi c√≥ l·ªói t·ª´ coroutine kh√°c**, h√£y d√πng `SupervisorJob`.
 */

@Suppress("RedundantSuspendModifier")
suspend inline fun <R> runSuspendCatching(block: () -> R): Result<R> {
    return runCatching {  block() }
        .onFailure {
            // rethrow CancellationException -> cancel coroutine
            if (it is CancellationException) throw it
        }
}

suspend fun getApi(): Result<String> {
    return runSuspendCatching {
        delay(100)
        "OK response"
    }
}

fun main(): Unit = runBlocking {
    // launch: CoroutineExceptionHandler
    // uncaught exception

    val scope = CoroutineScope(
        context = Dispatchers.Default + SupervisorJob() +
        CoroutineExceptionHandler{coroutineContext, throwable ->
            println(">>> CoroutineExceptionHandler: $throwable")
            println(">>> CoroutineExceptionHandler: $coroutineContext")
        }
    )

    class ViewModel {
        suspend fun getApi() = "OK"

        fun doSomething() {
            scope.launch {
                try {
                    getApi()
                } catch (cancel: CancellationException) {
                    throw cancel
                } catch( e: Throwable) {
                    // show error to UI
                }
            }
        }
    }

    scope.launch {
        println("launch 1")
        delay(1)
        println("launch 1 throws ...")
        throw RuntimeException("launch 1 failed")
    }

    scope.launch {
        println("launch 2")
        delay(1000)
        println("launch 2 throws ...")
    }

    scope.launch {
        println("launch 3")
        delay(100)
        println("launch 3 done ...")
    }

    delay(5_5000)
}
